<<<<<<< HEAD
-- Expected output:
-- VALID PROPERTIES: [ok1]
-- INVALID PROPERTIES: [cex2, cex3, cex1]

node main(x : int; s : subrange [0, 1] of int) returns ();
var
    y, z1, z2, w : int;
    ok1, cex1, cex2, cex3 : bool;
    pre_s : int;
let
    y = 1 -> pre(2 -> pre x);

    z1 = 1 -> pre z2;
    z2 = 2 -> pre x;

    ok1 = (y = z1);
    --%PROPERTY ok1;

    w = 1 -> pre(2 -> pre(3 -> pre(4 -> pre(5 -> 6))));
    cex1 = w < 6;
    --%PROPERTY cex1;

    -- These should be fail since pre-initial values are not constrained
    cex2 = 0 <= pre(s) and pre(s) <= 1;
    --%PROPERTY cex2;

    pre_s = pre(s);
    cex3 = 0 <= pre_s and pre_s <= 1;
    --%PROPERTY cex3;
tel;
=======
-- Expected output:
-- VALID PROPERTIES: [ok1]
-- INVALID PROPERTIES: [cex2, cex3, cex4, cex1]

node main(x : int; s : subrange [0, 1] of int) returns ();
var
    y, z1, z2, w : int;
    ok1, cex1, cex2, cex3, cex4 : bool;
    pre_s : int;
    r : subrange [0, 1] of int;
let
    y = 1 -> pre(2 -> pre x);

    z1 = 1 -> pre z2;
    z2 = 2 -> pre x;

    ok1 = (y = z1);
    --%PROPERTY ok1;

    w = 1 -> pre(2 -> pre(3 -> pre(4 -> pre(5 -> 6))));
    cex1 = w < 6;
    --%PROPERTY cex1;

    -- These should be fail since pre-initial values are not constrained
    cex2 = 0 <= pre(s) and pre(s) <= 1;
    --%PROPERTY cex2;

    pre_s = pre(s);
    cex3 = 0 <= pre_s and pre_s <= 1;
    --%PROPERTY cex3;

    r = pre(r);
    cex4 = 0 <= r and r <= 1;
    --%PROPERTY cex4;
tel;
>>>>>>> refs/remotes/upstream/master
